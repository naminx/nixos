#!/usr/bin/env fish

function show_usage
  echo usage: (basename (status filename)) PIXELS FILE ...
  echo ''
  echo   Trim PIXELS from the left side of odd number files, and the right side of
  echo   even number files. If PIXELS is negative, then trim the right side of even
  echo   number files and the left side of odd number files.
end

if string match --quiet --regex -- '^(?<sign>-?)(?<pixel>[[:digit:]]+)$' {$argv[1]}
  set files {$argv[2..]}
  if test (count {$files}) -eq 0
    set files *.{jpg,png,webp}
    if test (count {$files}) -ge 1
      set cmd (realpath (status current-filename))
      {$cmd} {$argv[1]} {$files}
    end
  else if test (count {$files}) -eq 1
    set file {$files[1]}
    set file_base (basename {$file})
    set name (string split --fields 1 --max 1 --no-empty --right -- . {$file_base})
    set right_char (string sub --start -1 -- {$name})
    if test -e {$file}
      if test (math {$right_char} % 2) -eq 1
        if test -z {$sign}
          magix -gravity west -chop {$pixel}x0 {$file}
        else
          magix -gravity east -chop {$pixel}x0 {$file}
        end
      else if test (math {$right_char} % 2) -eq 0
        if test -z {$sign}
          magix -gravity east -chop {$pixel}x0 {$file}
        else
          magix -gravity west -chop {$pixel}x0 {$file}
        end
      end
    else
      echo (basename (status filename)): {$file} not found
    end
  else
    string join0 -- {$files} \
      | parallel --null (realpath (status current-filename)) {$argv[1]}
  end
else
  echo (basename (status filename)): expected an integer, got \"{$argv[1]}\"
  echo ''
  show_usage
end
